{-# OPTIONS_GHC -Wno-unused-top-binds #-}
module Task (getGraph, chooseType, chooseSubType, chooseTask, getTasks, taskLgraph) where

import Types(Node(Node), Lgraph, Path(Path), Bracket(Bracket), Tag(Symb, Func, Var))
import Lgraph(addNodes, initGraph, allPaths)
--import System.Random (mkStdGen)
import Test.QuickCheck.Gen(choose, unGen)
import Test.QuickCheck.Random(mkQCGen)
import Data.Maybe (fromMaybe)

taskLgraph::[Node]->Int->Lgraph
taskLgraph nodes f = addNodes (initGraph f) (filter (\(Node from _) -> from < f) nodes)

getTasks::Lgraph->[Path]
getTasks = allPaths False

elemByIndex::[a]->Int->Maybe a
elemByIndex [] _ = Nothing
elemByIndex (x:xs) n | n == 0 = Just x
                     | otherwise = elemByIndex xs (n - 1)

chooseTask::[Path]->Int->([Tag], [Bracket], [Bracket])
chooseTask paths seed = (text, [], br2)
                   where path = elemByIndex paths i
                         (Path _ text _ br2 _ _) = fromMaybe (Path [] [] [] [] [] []) path
                         i = unGen (choose (0, length paths - 1)) (mkQCGen seed) 1

--chooseTask (getTasks (taskLgraph logicLgraph 6)) 1
--chooseTask (getTasks (taskLgraph ))
--getGraph chooseType chooseSubType 

getGraph::Int->Int->([Node], Int, Int)
getGraph type_ind subtype_ind = fromMaybe ([], 0, 0) result
                                where result = elemByIndex subtypes subtype_ind
                                      subtypes = fromMaybe [] t
                                      t = elemByIndex allTasks type_ind

chooseType::Int->Int
chooseType seed = unGen (choose (0, length lst - 1)) (mkQCGen seed) 1
                  where lst = allTasks

chooseSubType::Int->Int->Int
chooseSubType seed type_ind = unGen (choose (0, length lst - 1)) (mkQCGen seed) 1
                              where lst = fromMaybe [] (elemByIndex allTasks type_ind)

-- (type, graphs)
-- where graph = (nodes, end of taskgraph, end of graph)
allTasks::[[([Node], Int, Int)]]
allTasks = [[(listelemsgraph, 25, 40), (createsexprgraph, 25, 31), 
             (arithmexprgraph, 13, 55), (arithmvecgraph, 12, 67)], 
            [(exprtypeLgraph, 6, 39)], 
            [(makelistLgraph, 10, 33), (logicLgraph, 6, 61), (partfuncLgraph, 2, 31), 
             (minmaxLgraph, 4, 59), (absoluteLgraph, 2, 29), (listpropsLgraph, 5, 87)], 
            [(arithmlistLgraph, 6, 44)], 
            [(ziplistsLgraph, 6, 45)]]


listelemsgraph::[Node]
listelemsgraph = [Node 1 [(Symb "Для заданного списка L: ", [], [], 2)],
                  Node 2 [(Symb "(", [Bracket '(' 2], [Bracket '<' 0], 3)],
                  Node 3 [(Symb " C ", [], [Bracket '<' 3], 4)],
                  Node 4 [(Symb "(", [Bracket '(' 1], [Bracket '<' 13, Bracket '<' 11], 5),
                          (Symb "", [], [Bracket '<' 13], 5)],
                  Node 5 [(Symb " B ", [], [Bracket '<' 2], 6)],
                  Node 6 [(Symb ")", [Bracket ')' 1], [Bracket '<' 12], 7),
                          (Symb "", [], [], 7)],
                  Node 7 [(Symb "(", [Bracket '(' 1], [Bracket '<' 13, Bracket '<' 11], 8),
                          (Symb "", [], [Bracket '<' 13], 8)],
                  Node 8 [(Symb " A ", [], [Bracket '<' 1], 9)],
                  Node 9 [(Symb ")", [Bracket ')' 1], [Bracket '<' 12], 10),
                          (Symb "", [], [], 10)],
                  Node 10 [(Symb "(", [Bracket '(' 1], [Bracket '<' 13, Bracket '<' 11], 11),
                           (Symb "", [], [Bracket '<' 13], 12)],
                  Node 11 [(Symb "(", [Bracket '(' 1], [Bracket '<' 11], 12),
                           (Symb "", [], [], 12)],
                  Node 12 [(Symb " D ", [], [Bracket '<' 4], 13)],
                  Node 13 [(Symb ")", [Bracket ')' 1], [Bracket '<' 12], 14),
                           (Symb "", [], [], 15)],
                  Node 14 [(Symb ")", [Bracket ')' 1], [Bracket '<' 12], 15),
                           (Symb "", [], [], 15)],
                  Node 15 [(Symb " F ", [], [Bracket '<' 13, Bracket '<' 6], 16)],
                  Node 16 [(Symb "(", [Bracket '(' 1], [Bracket '<' 13, Bracket '<' 11], 17),
                           (Symb "", [], [Bracket '<' 13], 18)],
                  Node 17 [(Symb "(", [Bracket '(' 1], [Bracket '<' 11], 18),
                           (Symb "", [], [], 18)],
                  Node 18 [(Symb " E ", [], [Bracket '<' 5], 19)],
                  Node 19 [(Symb ")", [Bracket ')' 1], [Bracket '<' 12], 20),
                           (Symb "", [], [], 21)],
                  Node 20 [(Symb ")", [Bracket ')' 1], [Bracket '<' 12], 21),
                           (Symb "", [], [], 21)],
                  Node 21 [(Symb ")", [Bracket ')' 2], [], 22)],
                  Node 22 [(Symb "получить атом ", [], [], 23)],
                  Node 23 [(Symb "A", [], [Bracket '<' 1], 24),
                           (Symb "B", [], [Bracket '<' 2], 24),
                           (Symb "C", [], [Bracket '<' 3], 24),
                           (Symb "D", [], [Bracket '<' 4], 24),
                           (Symb "E", [], [Bracket '<' 5], 24),
                           (Symb "F", [], [Bracket '<' 6], 24)],
                  Node 24 [(Symb " с помощью композиций базовых функций car и cdr.", [], [], 25)],
                  Node 25 [(Symb "", [Bracket '(' 1, Bracket '(' 0], [Bracket '>' 1], 26),
                           (Symb "", [Bracket '(' 2, Bracket '(' 0], [Bracket '>' 2], 26),
                           (Symb "", [Bracket '(' 3, Bracket '(' 0], [Bracket '>' 3], 26),
                           (Symb "", [Bracket '(' 4, Bracket '(' 0], [Bracket '>' 4], 26),
                           (Symb "", [Bracket '(' 5, Bracket '(' 0], [Bracket '>' 5], 26),
                           (Symb "", [Bracket '(' 6, Bracket '(' 0], [Bracket '>' 6], 26)],
                  Node 26 [(Symb "", [Bracket '(' 20], [Bracket '>' 0], 27),
                           (Symb "", [Bracket '(' 11], [Bracket '>' 11], 26),
                           (Symb "", [Bracket '(' 12], [Bracket '>' 12], 26),
                           (Symb "", [Bracket '(' 13], [Bracket '>' 13], 26),
                           (Symb "", [Bracket '(' 1], [Bracket '>' 1], 26),
                           (Symb "", [Bracket '(' 2], [Bracket '>' 2], 26),
                           (Symb "", [Bracket '(' 3], [Bracket '>' 3], 26),
                           (Symb "", [Bracket '(' 4], [Bracket '>' 4], 26),
                           (Symb "", [Bracket '(' 5], [Bracket '>' 5], 26),
                           (Symb "", [Bracket '(' 6], [Bracket '>' 6], 26)],
                  Node 27 [(Symb "L", [], [], 29),
                           (Symb "(", [Bracket '(' 0], [], 28)],
                  Node 28 [(Symb "CAR", [], [Bracket '<' 21], 27),
                           (Symb "CDR", [], [Bracket '<' 22], 27)],
                  Node 29 [(Symb ")", [Bracket ')' 0], [], 29),
                           (Symb "", [Bracket ')' 20], [], 30)],
                  Node 30 [(Symb "", [], [Bracket '>' 21], 31),
                           (Symb "", [], [Bracket '>' 22], 36)],
                  Node 31 [(Symb "", [Bracket ')' 11], [Bracket '<' 0], 32),
                           (Symb "", [Bracket ')' 1, Bracket '(' 1], [], 35),
                           (Symb "", [Bracket ')' 2, Bracket '(' 2], [], 35),
                           (Symb "", [Bracket ')' 3, Bracket '(' 3], [], 35),
                           (Symb "", [Bracket ')' 4, Bracket '(' 4], [], 35),
                           (Symb "", [Bracket ')' 5, Bracket '(' 5], [], 35),
                           (Symb "", [Bracket ')' 6, Bracket '(' 6], [], 35)],
                  Node 32 [(Symb "", [Bracket ')' 1], [Bracket '<' 1], 32),
                           (Symb "", [Bracket ')' 2], [Bracket '<' 2], 32),
                           (Symb "", [Bracket ')' 3], [Bracket '<' 3], 32),
                           (Symb "", [Bracket ')' 4], [Bracket '<' 4], 32),
                           (Symb "", [Bracket ')' 5], [Bracket '<' 5], 32),
                           (Symb "", [Bracket ')' 6], [Bracket '<' 6], 32),
                           (Symb "", [Bracket ')' 13], [Bracket '<' 13], 32),
                           (Symb "", [Bracket ')' 11], [Bracket '<' 11, Bracket '<' 10], 32),
                           (Symb "", [Bracket ')' 12, Bracket '(' 10], [], 33)],
                  Node 33 [(Symb "", [Bracket '(' 11], [Bracket '>' 11], 33),
                            (Symb "", [Bracket '(' 12], [Bracket '>' 12], 33),
                            (Symb "", [Bracket '(' 13], [Bracket '>' 13], 33),
                            (Symb "", [Bracket '(' 1], [Bracket '>' 1], 33),
                            (Symb "", [Bracket '(' 2], [Bracket '>' 2], 33),
                            (Symb "", [Bracket '(' 3], [Bracket '>' 3], 33),
                            (Symb "", [Bracket '(' 4], [Bracket '>' 4], 33),
                            (Symb "", [Bracket '(' 5], [Bracket '>' 5], 33),
                            (Symb "", [Bracket '(' 6], [Bracket '>' 6], 33),
                            (Symb "", [], [Bracket '>' 10], 34),
                            (Symb "", [], [Bracket '>' 0], 30)],
                  Node 34 [(Symb "", [Bracket ')' 10], [Bracket '<' 12], 32),
                           (Symb "", [Bracket ')' 11], [Bracket '<' 11], 34),
                           (Symb "", [Bracket ')' 12], [Bracket '<' 12], 34),
                           (Symb "", [Bracket ')' 13], [Bracket '<' 13], 34),
                           (Symb "", [Bracket ')' 1], [Bracket '<' 1], 34),
                           (Symb "", [Bracket ')' 2], [Bracket '<' 2], 34),
                           (Symb "", [Bracket ')' 3], [Bracket '<' 3], 34),
                           (Symb "", [Bracket ')' 4], [Bracket '<' 4], 34),
                           (Symb "", [Bracket ')' 5], [Bracket '<' 5], 34),
                           (Symb "", [Bracket ')' 6], [Bracket '<' 6], 34)],
                  Node 35 [(Symb "", [Bracket ')' 1], [Bracket '<' 1], 38),
                           (Symb "", [Bracket ')' 2], [Bracket '<' 2], 38),
                           (Symb "", [Bracket ')' 3], [Bracket '<' 3], 38),
                           (Symb "", [Bracket ')' 4], [Bracket '<' 4], 38),
                           (Symb "", [Bracket ')' 5], [Bracket '<' 5], 38),
                           (Symb "", [Bracket ')' 6], [Bracket '<' 6], 38),
                           (Symb "", [Bracket ')' 11], [], 30),
                           (Symb "", [Bracket ')' 12], [], 30),
                           (Symb "", [Bracket ')' 13], [], 30)],
                  Node 36 [(Symb "", [Bracket ')' 11], [Bracket '<' 0], 37),
                           (Symb "", [Bracket ')' 1, Bracket ')' 13], [], 30),
                           (Symb "", [Bracket ')' 2, Bracket ')' 13], [], 30),
                           (Symb "", [Bracket ')' 3, Bracket ')' 13], [], 30),
                           (Symb "", [Bracket ')' 4, Bracket ')' 13], [], 30),
                           (Symb "", [Bracket ')' 5, Bracket ')' 13], [], 30),
                           (Symb "", [Bracket ')' 6, Bracket ')' 13], [], 30)],
                  Node 37 [(Symb "", [Bracket ')' 11], [Bracket '<' 10], 37),
                           (Symb "", [Bracket ')' 12], [Bracket '>' 10], 37),
                           (Symb "", [Bracket ')' 12, Bracket ')' 13], [Bracket '>' 0], 30),
                           (Symb "", [Bracket ')' 13], [], 37),
                           (Symb "", [Bracket ')' 1], [], 37),
                           (Symb "", [Bracket ')' 2], [], 37),
                           (Symb "", [Bracket ')' 3], [], 37),
                           (Symb "", [Bracket ')' 4], [], 37),
                           (Symb "", [Bracket ')' 5], [], 37),
                           (Symb "", [Bracket ')' 6], [], 37)],
                  Node 38 [(Symb "", [Bracket ')' 0], [], 39),
                           (Symb "", [Bracket ')' 10], [], 38),
                           (Symb "", [Bracket ')' 11], [], 38),
                           (Symb "", [Bracket ')' 12], [], 38),
                           (Symb "", [Bracket ')' 13], [], 38),
                           (Symb "", [Bracket ')' 1], [], 38),
                           (Symb "", [Bracket ')' 2], [], 38),
                           (Symb "", [Bracket ')' 3], [], 38),
                           (Symb "", [Bracket ')' 4], [], 38),
                           (Symb "", [Bracket ')' 5], [], 38),
                           (Symb "", [Bracket ')' 6], [], 38)],
                  Node 39 [(Symb "", [Bracket ')' 1], [Bracket '>' 1], 40),
                           (Symb "", [Bracket ')' 2], [Bracket '>' 2], 40),
                           (Symb "", [Bracket ')' 3], [Bracket '>' 3], 40),
                           (Symb "", [Bracket ')' 4], [Bracket '>' 4], 40),
                           (Symb "", [Bracket ')' 5], [Bracket '>' 5], 40),
                           (Symb "", [Bracket ')' 6], [Bracket '>' 6], 40)]]

createsexprgraph::[Node]
createsexprgraph = [Node 1 [(Symb "Заданы 4 S-выражения S1, S2, S3, S4. Требуется составить из них S-выражение вида ", [], [], 2)],
                    Node 2 [(Symb "(", [Bracket '(' 2], [Bracket '<' 4, Bracket '<' 1], 3)],
                    Node 3 [(Symb "(", [Bracket '(' 1], [Bracket '<' 1], 4),
                            (Symb "", [], [], 4)],
                    Node 4 [(Symb " S1 ", [], [Bracket '<' 10], 5)],
                    Node 5 [(Symb ")", [Bracket ')' 1], [Bracket '<' 2], 6),
                            (Symb "", [], [], 6)],
                    Node 6 [(Symb "(", [Bracket '(' 1], [Bracket '<' 3, Bracket '<' 1], 7),
                            (Symb "", [], [Bracket '<' 3], 7),
                            (Symb ".", [Bracket ')' 1], [], 9)],
                    Node 7 [(Symb " S2 ", [], [Bracket '<' 20], 8)],
                    Node 8 [(Symb ")", [Bracket ')' 1], [Bracket '<' 2], 11),
                            (Symb "", [], [], 11)],
                    Node 9 [(Symb " S2 ", [], [Bracket '<' 20], 10)],
                    Node 10 [(Symb ")", [], [Bracket '<' 5], 11)],
                    Node 11 [(Symb "(", [Bracket '(' 1], [Bracket '<' 3, Bracket '<' 1], 12),
                             (Symb "", [], [Bracket '<' 3], 12),
                             (Symb ".", [Bracket ')' 1], [], 14)],
                    Node 12 [(Symb " S3 ", [], [Bracket '<' 30], 13)],
                    Node 13 [(Symb ")", [Bracket ')' 1], [Bracket '<' 2], 16),
                             (Symb "", [], [], 16)],
                    Node 14 [(Symb " S3 ", [], [Bracket '<' 30], 15)],
                    Node 15 [(Symb ")", [], [Bracket '<' 5], 16)],
                    Node 16 [(Symb "(", [Bracket '(' 1], [Bracket '<' 3, Bracket '<' 1], 17),
                             (Symb "", [], [Bracket '<' 3], 17),
                             (Symb ".", [Bracket ')' 1], [], 19),
                             (Symb ".", [Bracket ')' 2], [], 22)],
                    Node 17 [(Symb " S4 ", [], [Bracket '<' 40], 18)],
                    Node 18 [(Symb ")", [Bracket ')' 1], [Bracket '<' 2], 21),
                             (Symb "", [], [], 21)],
                    Node 19 [(Symb " S4 ", [], [Bracket '<' 40], 20)],
                    Node 20 [(Symb ")", [], [Bracket '<' 5], 21)],
                    --Node 21 [(Symb ")", [Bracket ')' 2, Bracket '(' 4], [Bracket '<' 2], 24)],
                    Node 21 [(Symb ")", [Bracket ')' 2], [Bracket '<' 2], 24)],
                    Node 22 [(Symb " S4 ", [], [Bracket '<' 40], 23)],
                    --Node 23 [(Symb ")", [Bracket '(' 4], [Bracket '<' 5], 24)],
                    Node 23 [(Symb ")", [], [Bracket '<' 5], 24)],
                    Node 24 [(Symb ". Разрешается использовать только функцию cons. Ее аргументами могут быть только заданные выражения и NIL. ", [], [], 25)],
                    Node 25 [(Symb "", [Bracket '(' 4], [], 26)],
                    Node 26 [(Symb "", [Bracket '(' 1], [Bracket '>' 1], 26),
                             (Symb "", [Bracket '(' 2], [Bracket '>' 2], 26),
                             (Symb "", [Bracket '(' 3], [Bracket '>' 3], 26),
                             (Symb "", [Bracket '(' 5], [Bracket '>' 5], 26),
                             (Symb "", [Bracket '(' 10], [Bracket '>' 10], 26),
                             (Symb "", [Bracket '(' 20], [Bracket '>' 20], 26),
                             (Symb "", [Bracket '(' 30], [Bracket '>' 30], 26),
                             (Symb "", [Bracket '(' 40], [Bracket '>' 40], 26),
                             (Symb "", [], [Bracket '>' 4], 27)],
                    Node 27 [(Symb "(", [Bracket ')' 1], [Bracket '<' 4], 29),
                             (Symb "NIL", [Bracket ')' 2], [], 30),
                             (Symb "(", [Bracket ')' 3], [Bracket '<' 3], 29),
                             (Symb ")", [Bracket ')' 5], [], 28),
                             (Symb "S1", [Bracket ')' 10], [], 27),
                             (Symb "S2", [Bracket ')' 20], [], 27),
                             (Symb "S3", [Bracket ')' 30], [], 27),
                             (Symb "S4", [Bracket ')' 40], [], 27),
                             (Symb "", [Bracket ')' 4], [], 31)],
                    Node 28 [(Symb ")", [], [Bracket '>' 3], 28),
                             (Symb "", [], [Bracket '>' 4], 27)],
                    Node 29 [(Symb "CONS", [], [], 27)],
                    Node 30 [(Symb ")", [], [], 28)]]

arithmexprgraph::[Node]
arithmexprgraph = [Node 1 [(Symb "Пусть дан ", [], [], 2)],
                   Node 2 [(Symb "одноуровневый ", [Bracket '(' 1], [], 3),
                           (Symb "", [Bracket '(' 2], [], 3)],
                   Node 3 [(Symb "список ", [], [], 4)],
                   Node 4 [(Symb "чисел ", [Bracket ')' 1, Bracket '(' 1], [], 5),
                           (Symb "", [Bracket ')' 2, Bracket '(' 2], [], 5)],
                   Node 5 [(Symb "L", [], [], 6)],
                   Node 6 [(Symb ". Посчитать ", [Bracket ')' 1], [], 7),
                           (Symb ", состоящий из двух элементов: одноуровневых списков чисел. Вычислить разность ", [Bracket ')' 2], [], 9)],
                   Node 7 [(Symb "сумму ", [], [Bracket '<' 1], 8),
                           (Symb "произведение ", [], [Bracket '<' 2], 8)],
                   Node 8 [(Symb "его элементов, использовав минимальное число токенов, отличных от скобок.", [], [Bracket '<' 1], 13)],
                   Node 9 [(Symb "произведения ", [Bracket '(' 2], [], 10),
                           (Symb "суммы ", [Bracket '(' 3], [], 10)],
                   Node 10 [(Symb "элементов первого списка с ", [], [], 11)],
                   Node 11 [(Symb "суммой ", [Bracket ')' 2], [Bracket '<' 2], 12),
                            (Symb "произведением ", [Bracket ')' 3], [Bracket '<' 1], 12)],
                   Node 12 [(Symb "элементов второго. Использовать не более 14 токенов.", [], [Bracket '<' 2], 13)],
                   Node 13 [(Symb "(", [], [], 14)],
                   Node 14 [(Symb "EVAL", [], [], 15),
                            (Symb "-", [], [Bracket '>' 2], 26)],
                   Node 15 [(Symb "(", [], [], 16)],
                   Node 16 [(Symb "CONS", [], [Bracket '>' 1], 17),
                            (Symb "LIST", [], [Bracket '>' 2], 22)],
                   Node 17 [(Symb "(", [], [], 18),
                            (Symb "`", [Bracket '(' 1], [], 19)],
                   Node 18 [(Symb "QUOTE", [Bracket '(' 2], [], 19)],
                   Node 19 [(Symb "+", [], [Bracket '>' 1], 20),
                            (Symb "*", [], [Bracket '>' 2], 20)],
                   Node 20 [(Symb "", [Bracket ')' 1], [], 21),
                            (Symb ")", [Bracket ')' 2], [], 21)],
                   Node 21 [(Symb "L", [], [], 53)],
                   Node 22 [(Symb "(", [], [], 23),
                            (Symb "`", [Bracket '(' 1], [], 24)],
                   Node 23 [(Symb "QUOTE", [Bracket '(' 2], [], 24)],
                   Node 24 [(Symb "-", [], [], 25)],
                   Node 25 [(Symb "", [Bracket ')' 1, Bracket '(' 1], [], 28),
                            (Symb ")", [Bracket ')' 2, Bracket '(' 1], [], 28)],
                   Node 26 [(Symb "(", [], [], 27)],
                   Node 27 [(Symb "EVAL", [Bracket '(' 2], [], 28)],
                   Node 28 [(Symb "(", [], [], 29)],
                   Node 29 [(Symb "CONS", [], [], 30)],
                   Node 30 [(Symb "(", [], [], 31),
                            (Symb "`", [Bracket '(' 1], [], 32)],
                   Node 31 [(Symb "QUOTE", [Bracket '(' 2], [], 32)],
                   Node 32 [(Symb "+", [], [Bracket '>' 1, Bracket '<' 2], 33),
                            (Symb "*", [], [Bracket '>' 2, Bracket '<' 1], 33)],
                   Node 33 [(Symb "", [Bracket ')' 1], [], 34),
                            (Symb ")", [Bracket ')' 2], [], 34)],
                   Node 34 [(Symb "(", [], [], 35)],
                   Node 35 [(Symb "CAR", [], [], 36)],
                   Node 36 [(Symb "L", [], [], 37)],
                   Node 37 [(Symb ")", [], [], 38)],
                   Node 38 [(Symb ")", [], [], 39)],
                   Node 39 [(Symb ")", [Bracket ')' 2], [], 40),
                            (Symb "", [Bracket ')' 1], [], 42)],
                   Node 40 [(Symb "(", [], [], 41)],
                   Node 41 [(Symb "EVAL", [], [], 42)],
                   Node 42 [(Symb "(", [], [], 43)],
                   Node 43 [(Symb "CONS", [], [], 44)],
                   Node 44 [(Symb "(", [], [], 45),
                            (Symb "`", [Bracket '(' 1], [], 46)],
                   Node 45 [(Symb "QUOTE", [Bracket '(' 2], [], 46)],
                   Node 46 [(Symb "+", [], [Bracket '>' 1], 47),
                            (Symb "*", [], [Bracket '>' 2], 47)],
                   Node 47 [(Symb "", [Bracket ')' 1], [], 48),
                            (Symb ")", [Bracket ')' 2], [], 48)],
                   Node 48 [(Symb "(", [], [], 49)],
                   Node 49 [(Symb "CADR", [], [], 50)],
                   Node 50 [(Symb "L", [], [], 51)],
                   Node 51 [(Symb ")", [], [], 52)],
                   Node 52 [(Symb ")", [], [], 53)],
                   Node 53 [(Symb ")", [], [], 54)],
                   Node 54 [(Symb ")", [], [], 55)]]

arithmvecgraph::[Node]
arithmvecgraph = [Node 1 [(Symb "Пусть ", [], [], 2)],
                  Node 2 [(Symb "две точки ", [Bracket '(' 1], [], 3),
                          (Symb "два вектора ", [Bracket '(' 2], [], 3),
                          (Symb "матрица 2x2 задается списком ((a11 a12) (a21 a22))", [Bracket '(' 3], [], 6)],
                  Node 3 [(Symb "в трехмерном пространстве представлены списками ", [], [], 4)],
                  Node 4 [(Symb "координат ", [Bracket ')' 1, Bracket '(' 1], [], 5),
                          (Symb "компонент ", [Bracket ')' 2, Bracket '(' 2], [], 5)],
                  Node 5 [(Symb "(x1 y1 z1), (x2 y2 z2)", [], [], 6)],
                  Node 6 [(Symb ". С использованием минимального числа токенов, отличных от скобок, требуется посчитать ", [], [], 7)],
                  Node 7 [(Symb "ее определитель", [Bracket ')' 3, Bracket '(' 3], [], 8),
                          (Symb "расстояние между этими точками", [Bracket ')' 1, Bracket '(' 1, Bracket '(' 2], [], 8),
                          (Symb "их скалярное произведение", [Bracket ')' 2, Bracket '(' 2, Bracket '(' 2], [], 8)],
                  Node 8 [(Symb ", если все числовые атомы ", [], [], 9)],
                  Node 9 [(Symb "xi, yi, zi, i = 1,2, ", [Bracket ')' 2, Bracket '(' 2], [], 10),
                          (Symb "aij, i,j = 1,2, ", [Bracket ')' 3, Bracket '(' 3], [], 10)],
                  Node 10 [(Symb "заданы.", [Bracket ')' 2], [], 11),
                           (Symb "даны.", [Bracket ')' 3], [Bracket '<' 3], 12)],
                  Node 11 [(Symb " Доступны встроенные функции sqrt (взятие корня), expt (возведение в степень).", [Bracket ')' 1], [Bracket '<' 1], 12),
                           (Symb "", [Bracket ')' 2], [Bracket '<' 2], 12)],
                  Node 12 [(Symb "(", [], [], 13)],
                  Node 13 [(Symb "SQRT", [], [Bracket '>' 1, Bracket '<' 1], 14),
                           (Symb "", [], [Bracket '>' 2, Bracket '<' 2], 15),
                           (Symb "-", [], [Bracket '>' 3], 56)],
                  Node 14 [(Symb "(", [], [], 15)],
                  Node 15 [(Symb "+", [], [], 16)],
                  Node 16 [(Symb "(", [], [], 17)],
                  Node 17 [(Symb "EXPT", [], [Bracket '>' 1, Bracket '<' 1], 18),
                           (Symb "*", [], [Bracket '>' 2, Bracket '<' 2], 20)],
                  Node 18 [(Symb "(", [], [], 19)],
                  Node 19 [(Symb "-", [], [], 20)],
                  Node 20 [(Symb "X1", [Bracket '(' 1], [], 21),
                           (Symb "X2", [Bracket '(' 2], [], 21),
                           (Symb "Y1", [Bracket '(' 1], [], 22),
                           (Symb "Y2", [Bracket '(' 2], [], 22),
                           (Symb "Z1", [Bracket '(' 1], [], 23),
                           (Symb "Z2", [Bracket '(' 2], [], 23)],
                  Node 21 [(Symb "X1", [Bracket ')' 2, Bracket '(' 1], [], 24),
                           (Symb "X2", [Bracket ')' 1, Bracket '(' 1], [], 24)],
                  Node 22 [(Symb "Y1", [Bracket ')' 2, Bracket '(' 2], [], 24),
                           (Symb "Y2", [Bracket ')' 1, Bracket '(' 2], [], 24)],
                  Node 23 [(Symb "Z1", [Bracket ')' 2, Bracket '(' 3], [], 24),
                           (Symb "Z2", [Bracket ')' 1, Bracket '(' 3], [], 24)],
                  Node 24 [(Symb ")", [], [Bracket '>' 1, Bracket '<' 1], 25),
                           (Symb "", [], [Bracket '>' 2, Bracket '<' 2], 26)],
                  Node 25 [(Symb "2", [], [], 26)],
                  Node 26 [(Symb ")", [], [], 27)],
                  Node 27 [(Symb "(", [], [], 28)],
                  Node 28 [(Symb "EXPT", [], [Bracket '>' 1, Bracket '<' 1], 29),
                           (Symb "*", [], [Bracket '>' 2, Bracket '<' 2], 31)],
                  Node 29 [(Symb "(", [], [], 30)],
                  Node 30 [(Symb "-", [], [], 31)],
                  Node 31 [(Symb "", [Bracket ')' 1], [], 32),
                           (Symb "", [Bracket ')' 2], [], 35),
                           (Symb "", [Bracket ')' 3], [], 38)],
                  Node 32 [(Symb "Y1", [Bracket '(' 1], [], 33),
                           (Symb "Y2", [Bracket '(' 2], [], 33),
                           (Symb "Z1", [Bracket '(' 1], [], 34),
                           (Symb "Z2", [Bracket '(' 2], [], 34)],
                  Node 33 [(Symb "Y1", [Bracket ')' 2, Bracket '(' 3], [], 41),
                           (Symb "Y2", [Bracket ')' 1, Bracket '(' 3], [], 41)],
                  Node 34 [(Symb "Z1", [Bracket ')' 2, Bracket '(' 2], [], 41),
                           (Symb "Z2", [Bracket ')' 1, Bracket '(' 2], [], 41)],
                  Node 35 [(Symb "X1", [Bracket '(' 1], [], 36),
                           (Symb "X2", [Bracket '(' 2], [], 36),
                           (Symb "Z1", [Bracket '(' 1], [], 37),
                           (Symb "Z2", [Bracket '(' 2], [], 37)],
                  Node 36 [(Symb "X1", [Bracket ')' 2, Bracket '(' 3], [], 41),
                           (Symb "X2", [Bracket ')' 1, Bracket '(' 3], [], 41)],
                  Node 37 [(Symb "Z1", [Bracket ')' 2, Bracket '(' 1], [], 41),
                           (Symb "Z2", [Bracket ')' 1, Bracket '(' 1], [], 41)],
                  Node 38 [(Symb "X1", [Bracket '(' 1], [], 39),
                           (Symb "X2", [Bracket '(' 2], [], 39),
                           (Symb "Y1", [Bracket '(' 1], [], 40),
                           (Symb "Y2", [Bracket '(' 2], [], 40)],
                  Node 39 [(Symb "X1", [Bracket ')' 2, Bracket '(' 2], [], 41),
                           (Symb "X2", [Bracket ')' 1, Bracket '(' 2], [], 41)],
                  Node 40 [(Symb "Y1", [Bracket ')' 2, Bracket '(' 1], [], 41),
                           (Symb "Y2", [Bracket ')' 1, Bracket '(' 1], [], 41)],
                  Node 41 [(Symb ")", [], [Bracket '>' 1, Bracket '<' 1], 42),
                           (Symb "", [], [Bracket '>' 2, Bracket '<' 2], 43)],
                  Node 42 [(Symb "2", [], [], 43)],
                  Node 43 [(Symb ")", [], [], 44)],
                  Node 44 [(Symb "(", [], [], 45)],
                  Node 45 [(Symb "EXPT", [], [Bracket '>' 1, Bracket '<' 1], 46),
                           (Symb "*", [], [Bracket '>' 2, Bracket '<' 2], 48)],
                  Node 46 [(Symb "(", [], [], 47)],
                  Node 47 [(Symb "-", [], [], 48)],
                  Node 48 [(Symb "X1", [Bracket ')' 1, Bracket '(' 1], [], 49),
                           (Symb "X2", [Bracket ')' 1, Bracket '(' 2], [], 49),
                           (Symb "Y1", [Bracket ')' 2, Bracket '(' 1], [], 50),
                           (Symb "Y2", [Bracket ')' 2, Bracket '(' 2], [], 50),
                           (Symb "Z1", [Bracket ')' 3, Bracket '(' 1], [], 51),
                           (Symb "Z2", [Bracket ')' 3, Bracket '(' 2], [], 51)],
                  Node 49 [(Symb "X1", [Bracket ')' 2], [], 52),
                           (Symb "X2", [Bracket ')' 1], [], 52)],
                  Node 50 [(Symb "Y1", [Bracket ')' 2], [], 52),
                           (Symb "Y2", [Bracket ')' 1], [], 52)],
                  Node 51 [(Symb "Z1", [Bracket ')' 2], [], 52),
                           (Symb "Z2", [Bracket ')' 1], [], 52)],
                  Node 52 [(Symb ")", [], [Bracket '>' 1], 53),
                           (Symb "", [], [Bracket '>' 2], 55)],
                  Node 53 [(Symb "2", [], [], 54)],
                  Node 54 [(Symb ")", [], [], 55)],
                  Node 55 [(Symb ")", [], [], 66)],
                  Node 56 [(Symb "(", [], [], 57)],
                  Node 57 [(Symb "*", [], [], 58)],
                  Node 58 [(Symb "A11", [Bracket '(' 1], [], 59),
                           (Symb "A22", [Bracket '(' 2], [], 59)],
                  Node 59 [(Symb "A11", [Bracket ')' 2], [], 60),
                           (Symb "A22", [Bracket ')' 1], [], 60)],
                  Node 60 [(Symb ")", [], [], 61)],
                  Node 61 [(Symb "(", [], [], 62)],
                  Node 62 [(Symb "*", [], [], 63)],
                  Node 63 [(Symb "A12", [Bracket '(' 1], [], 64),
                           (Symb "A21", [Bracket '(' 2], [], 64)],
                  Node 64 [(Symb "A12", [Bracket ')' 2], [], 65),
                           (Symb "A21", [Bracket ')' 1], [], 65)],
                  Node 65 [(Symb ")", [], [], 66)],
                  Node 66 [(Symb ")", [], [], 67)]]


exprtypeLgraph::[Node]
exprtypeLgraph = [Node 1 [(Symb "Пусть задано S-выражение x. ", [], [], 2)],
                  Node 2 [(Symb "Требуется вернуть атом empty, если ее x – пустое выражение, атом atom, если он является атомом, и атом list, если – списком. ", [], [Bracket '<' 1], 3),
                          (Symb "Если x – числовой атом, нужно вернуть результат его ", [], [], 4)],
                  Node 3 [(Symb "Решение должно быть минимальным по числу токенов, отличных от скобок.", [], [], 6)],
                  Node 4 [(Symb "сложения с n. ", [], [Bracket '<' 2], 5),
                          (Symb "разности с n. ", [], [Bracket '<' 3], 5),
                          (Symb "умножения на n. ", [], [Bracket '<' 4], 5),
                          (Symb "деления на n. ", [], [Bracket '<' 5], 5)],
                  Node 5 [(Symb ", где n - заданный числовой атом. Если символьный атом, результатом является его значение, и NIL иначе. ", [], [], 3)],
                  Node 6 [(Symb "(", [], [], 7)],
                  Node 7 [(Symb "COND", [], [], 8)],
                  Node 8 [(Symb "(", [], [], 9)],
                  Node 9 [(Symb "(", [], [], 10)],
                  Node 10 [(Symb "NULL", [Bracket '(' 1], [Bracket '>' 1], 11),
                           (Symb "NUMBERP", [Bracket '(' 3, Bracket '(' 2], [], 11),
                           (Symb "SYMBOLP", [Bracket '(' 3], [], 11)],
                  Node 11 [(Symb "X", [], [], 12)],
                  Node 12 [(Symb ")", [], [], 13)],
                  Node 13 [(Symb "(", [], [], 14),
                           (Symb "`", [Bracket ')' 1, Bracket '(' 1], [], 17),
                           (Symb "X", [Bracket ')' 3, Bracket '(' 2], [], 19)],
                  Node 14 [(Symb "/", [Bracket ')' 2, Bracket '(' 2], [Bracket '>' 5, Bracket '<' 1], 15),
                           (Symb "*", [Bracket ')' 2, Bracket '(' 2], [Bracket '>' 4, Bracket '<' 2], 15),
                           (Symb "-", [Bracket ')' 2, Bracket '(' 2], [Bracket '>' 3, Bracket '<' 1], 15),
                           (Symb "+", [Bracket ')' 2, Bracket '(' 2], [Bracket '>' 2, Bracket '<' 2], 15),
                           (Symb "QUOTE", [Bracket ')' 1, Bracket '(' 1, Bracket '(' 2], [], 17)],
                  Node 15 [(Symb "X", [Bracket '(' 1], [Bracket '>' 1], 16),
                           (Symb "X", [Bracket '(' 1], [Bracket '>' 2], 16),
                           (Symb "N", [Bracket '(' 2], [Bracket '>' 2], 16)],
                  Node 16 [(Symb "X", [Bracket ')' 2], [], 18),
                           (Symb "N", [Bracket ')' 1], [], 18)],
                  Node 17 [(Symb "EMPTY", [], [], 18)],
                  Node 18 [(Symb ")", [Bracket ')' 2], [], 19),
                           (Symb "", [Bracket ')' 1, Bracket '(' 1], [], 19)],
                  Node 19 [(Symb ")", [], [], 20)],
                  Node 20 [(Symb "(", [], [], 21)],
                  Node 21 [(Symb "(", [], [], 22)],
                  Node 22 [(Symb "ATOM", [Bracket ')' 1, Bracket '(' 1], [Bracket '<' 6], 23),
                           (Symb "LISTP", [Bracket ')' 1, Bracket '(' 1], [Bracket '<' 7], 23),
                           (Symb "NUMBERP", [Bracket ')' 2, Bracket '(' 2], [], 23),
                           (Symb "SYMBOLP", [Bracket ')' 3, Bracket '(' 3], [], 23)],
                  Node 23 [(Symb "X", [], [], 24)],
                  Node 24 [(Symb ")", [], [], 25)],
                  Node 25 [(Symb "(", [], [], 26),
                           (Symb "`", [Bracket ')' 1, Bracket '(' 1], [], 29),
                           (Symb "X", [Bracket ')' 3, Bracket '(' 2], [], 31)],
                  Node 26 [(Symb "/", [Bracket ')' 2, Bracket '(' 2, Bracket '(' 2], [Bracket '>' 5, Bracket '<' 1], 27),
                           (Symb "*", [Bracket ')' 2, Bracket '(' 2, Bracket '(' 2], [Bracket '>' 4, Bracket '<' 2], 27),
                           (Symb "-", [Bracket ')' 2, Bracket '(' 2, Bracket '(' 2], [Bracket '>' 3, Bracket '<' 1], 27),
                           (Symb "+", [Bracket ')' 2, Bracket '(' 2, Bracket '(' 2], [Bracket '>' 2, Bracket '<' 2], 27),
                           (Symb "QUOTE", [Bracket ')' 1, Bracket '(' 1, Bracket '(' 2], [], 29)],
                  Node 27 [(Symb "X", [Bracket '(' 1], [Bracket '>' 1], 28),
                           (Symb "X", [Bracket '(' 1], [Bracket '>' 2], 28),
                           (Symb "N", [Bracket '(' 2], [Bracket '>' 2], 28)],
                  Node 28 [(Symb "X", [Bracket ')' 2], [], 30),
                           (Symb "N", [Bracket ')' 1], [], 30)],
                  Node 29 [(Symb "ATOM", [], [Bracket '>' 6, Bracket '<' 7], 30),
                           (Symb "LIST", [], [Bracket '>' 7, Bracket '<' 6], 30)],
                  Node 30 [(Symb ")", [Bracket ')' 2], [], 31),
                           (Symb "", [Bracket ')' 1, Bracket '(' 1], [], 31)],
                  Node 31 [(Symb ")", [], [], 32)],
                  Node 32 [(Symb "(", [Bracket ')' 1], [], 33),
                           (Symb "", [Bracket ')' 2], [], 38)],
                  Node 33 [(Symb "(", [Bracket '(' 2], [], 34),
                           (Symb "`", [Bracket '(' 1], [], 35)],
                  Node 34 [(Symb "QUOTE", [], [], 35)],
                  Node 35 [(Symb "ATOM", [], [Bracket '>' 6], 36),
                           (Symb "LIST", [], [Bracket '>' 7], 36)],
                  Node 36 [(Symb ")", [Bracket ')' 2], [], 37),
                           (Symb "", [Bracket ')' 1], [], 37)],
                  Node 37 [(Symb ")", [], [], 38)],
                  Node 38 [(Symb ")", [], [], 39)]]


makelistLgraph::[Node]
makelistLgraph = [Node 1 [(Symb "Только с помощью базовых функций и defun реализовать", [], [], 2)],
                  Node 2 [(Symb "встроенную", [Bracket '(' 1], [], 3),
                          (Symb "", [Bracket '(' 2], [], 3)],
                  Node 3 [(Symb "функцию", [], [], 4)],
                  Node 4 [(Symb ", оборачивающую свой параметр в", [Bracket ')' 1], [], 5),
                          (Symb ", проверяющую список на пустоту", [Bracket ')' 2], [Bracket '<' 2], 9),
                          (Symb "list от", [Bracket ')' 1], [], 7)],
                  Node 5 [(Symb "2", [], [Bracket '<' 0, Bracket '<' 0, Bracket '<' 1], 6),
                          (Symb "3", [], [Bracket '<' 0, Bracket '<' 0, Bracket '<' 0, Bracket '<' 1], 6)],
                  Node 6 [(Symb "пары скобок.", [], [], 9)],
                  Node 7 [(Symb "двух", [], [Bracket '<' 2, Bracket '<' 3], 8),
                          (Symb "трех", [], [Bracket '<' 3, Bracket '<' 3], 8)],
                  Node 8 [(Symb "аргументов.", [], [], 9)],
                  Node 9 [(Symb "Число токенов, отличных от скобок, в решении должно быть минимальным.", [], [], 10)],
                  Node 10 [(Symb "(", [], [], 11)],
                  Node 11 [(Symb "DEFUN", [], [], 12)],
                  Node 12 [(Func 0, [], [], 13)],
                  Node 13 [(Symb "(", [], [], 14)],
                  Node 14 [(Var 0, [], [], 15)],
                  Node 15 [(Symb ")", [], [Bracket '>' 2], 16),
                           (Symb ")", [], [Bracket '>' 1], 22),
                           (Var 1, [], [Bracket '>' 3], 26)],
                  Node 16 [(Symb "(", [], [], 17)],
                  Node 17 [(Symb "EQ", [], [], 18)],
                  Node 18 [(Var 0, [Bracket '(' 1], [], 19),
                           (Symb "NIL", [Bracket '(' 2], [], 19)],
                  Node 19 [(Var 0, [Bracket ')' 2], [], 20),
                           (Symb "NIL", [Bracket ')' 1], [], 20)],
                  Node 20 [(Symb ")", [], [], 21)],
                  Node 21 [(Symb ")", [], [], 33)],
                  Node 22 [(Symb "(", [Bracket '(' 0], [Bracket '>' 0], 23),
                           (Var 0, [], [], 24)],
                  Node 23 [(Symb "CONS", [], [], 22)],
                  Node 24 [(Symb "NIL", [Bracket ')' 0], [], 25),
                           (Symb ")", [], [], 33)],
                  Node 25 [(Symb ")", [], [], 24)],
                  Node 26 [(Var 2, [Bracket '(' 2], [Bracket '>' 3], 27),
                           (Symb "", [], [Bracket '>' 2], 27)],
                  Node 27 [(Symb ")", [Bracket '(' 1, Bracket '(' 0], [Bracket '<' 1], 28)],
                  Node 28 [(Symb "(", [], [], 29),
                           (Symb "NIL", [], [], 32)],
                  Node 29 [(Symb "CONS", [], [], 30)],
                  Node 30 [(Var 0, [Bracket ')' 0], [Bracket '<' 0], 31),
                           (Var 1, [Bracket ')' 1], [Bracket '<' 0], 31),
                           (Var 2, [Bracket ')' 2], [Bracket '<' 0], 31)],
                  Node 31 [(Symb "", [], [], 28)],
                  Node 32 [(Symb ")", [], [Bracket '>' 0], 32),
                           (Symb ")", [], [Bracket '>' 1], 33)]]

logicLgraph::[Node]
logicLgraph = [Node 1 [(Symb "Реализовать функцию логики ", [], [], 2)],
               Node 2 [(Symb "ОТРИЦАНИЕ ", [Bracket '(' 1], [Bracket '<' 1], 3),
                       (Symb "И ", [Bracket '(' 2, Bracket '(' 2], [Bracket '<' 2, Bracket '<' 2, Bracket '<' 2], 3),
                       (Symb "ИЛИ ", [Bracket '(' 2, Bracket '(' 2], [Bracket '<' 3, Bracket '<' 2, Bracket '<' 2], 3),
                       (Symb "ИМПЛИКАЦИЯ ", [Bracket '(' 3, Bracket '(' 2], [Bracket '<' 4, Bracket '<' 2], 3),
                       (Symb "XOR ", [Bracket '(' 3, Bracket '(' 2], [Bracket '<' 5, Bracket '<' 2, Bracket '<' 2], 3)],
               Node 3 [(Symb "с помощью defun и cond. ", [], [], 4)],
               Node 4 [(Symb "Другие встроенные функции использовать нельзя. ", [Bracket ')' 1, Bracket '(' 1], [], 5),
                       (Symb "Дополнительно можно использовать функцию not. ", [Bracket ')' 2], [], 5)],
               Node 5 [(Symb "Число токенов в решении должно быть минимальным.", [Bracket ')' 1], [], 6),
                       (Symb "Число токенов в решении без not не должно превышать 7, а с not – 9.", [Bracket ')' 2], [], 6),
                       (Symb "Число токенов в решении не может превышать 10, а лишних (не влияющих на ответ) токенов быть не должно.", [Bracket ')' 3], [], 6)],
               Node 6 [(Symb "(", [], [], 7)],
               Node 7 [(Symb "DEFUN", [], [], 8)],
               Node 8 [(Func 0, [], [], 9)],
               Node 9 [(Symb "(", [], [], 10)],
               Node 10 [(Var 0, [], [], 11)],
               Node 11 [(Var 1, [], [Bracket '>' 2], 12),
                        (Symb "", [], [Bracket '>' 1, Bracket '<' 1], 12)],
               Node 12 [(Symb ")", [], [], 13)],
               Node 13 [(Symb "(", [], [], 14)],
               Node 14 [(Symb "COND", [], [], 15)],
               Node 15 [(Symb "(", [], [], 16)],
               Node 16 [(Var 0, [], [Bracket '>' 1], 17),
                        (Var 0, [], [Bracket '>' 4], 22),
                        (Symb "(", [Bracket '(' 1], [Bracket '>' 4], 23),
                        (Symb "", [Bracket '(' 3], [Bracket '>' 4], 24),
                        (Symb "", [], [Bracket '>' 2], 36)],
               Node 17 [(Symb "NIL", [], [], 18)],
               Node 18 [(Symb ")", [], [], 19)],
               Node 19 [(Symb "(", [], [], 20)],
               Node 20 [(Symb "T", [], [], 21)],
               Node 21 [(Symb ")", [], [], 35)],
               Node 22 [(Var 1, [Bracket '(' 1], [], 31)],
               Node 23 [(Symb "NOT", [], [], 24)],
               Node 24 [(Var 1, [], [], 25),
                        (Symb "", [Bracket ')' 1, Bracket '(' 2], [], 29)],
               Node 25 [(Symb ")", [], [], 26)],
               Node 26 [(Symb "(", [Bracket ')' 3, Bracket '(' 3], [], 27),
                        (Symb "", [Bracket ')' 1, Bracket '(' 1], [], 27)],
               Node 27 [(Symb "(", [], [], 28)],
               Node 28 [(Symb "NOT", [], [], 29)],
               Node 29 [(Var 0, [], [], 30)],
               Node 30 [(Symb ")", [], [], 31)],
               Node 31 [(Symb ")", [], [], 32)],
               Node 32 [(Symb "(", [], [], 33),
                        (Symb "", [Bracket ')' 3], [], 35)],
               Node 33 [(Symb "T", [Bracket ')' 1], [], 34),
                        (Var 1, [Bracket ')' 2], [], 34)],
               Node 34 [(Symb ")", [], [], 35)],
               Node 35 [(Symb ")", [], [], 60)],
               Node 36 [(Symb "(", [Bracket '(' 1], [], 37),
                        (Symb "", [Bracket '(' 2], [], 38)],
               Node 37 [(Symb "NOT", [], [], 38)],
               Node 38 [(Var 0, [], [Bracket '<' 1], 39),
                        (Var 1, [], [Bracket '<' 2], 39)],
               Node 39 [(Symb ")", [], [Bracket '>' 1, Bracket '>' 3, Bracket '<' 3, Bracket '<' 1], 45),
                        (Symb ")", [], [Bracket '>' 2, Bracket '>' 3, Bracket '<' 3, Bracket '<' 2], 45),
                        (Symb "", [], [Bracket '>' 1, Bracket '>' 2, Bracket '<' 2, Bracket '<' 1], 40),
                        (Symb "", [], [Bracket '>' 2, Bracket '>' 2, Bracket '<' 2, Bracket '<' 2], 40),
                        (Symb "", [], [Bracket '>' 1, Bracket '>' 5, Bracket '<' 5, Bracket '<' 1], 46),
                        (Symb "", [], [Bracket '>' 2, Bracket '>' 5, Bracket '<' 5, Bracket '<' 2], 46)],
               Node 40 [(Symb ")", [Bracket ')' 1], [], 41),
                        (Symb "", [Bracket ')' 2], [], 44)],
               Node 41 [(Symb "NIL", [], [], 42)],
               Node 42 [(Symb ")", [], [], 43)],
               Node 43 [(Symb "(", [], [], 44)],
               Node 44 [(Var 0, [], [Bracket '>' 2], 56),
                        (Var 1, [], [Bracket '>' 1], 56)],
               Node 45 [(Symb "(", [Bracket ')' 2, Bracket '(' 3], [], 44),
                        (Symb "", [Bracket ')' 1, Bracket '(' 2], [], 44)],
               Node 46 [(Symb ")", [Bracket ')' 1, Bracket '(' 3], [], 47),
                        (Symb "", [], [], 47)],
               Node 47 [(Symb "(", [Bracket ')' 2, Bracket '(' 2], [], 48),
                        (Symb "", [Bracket ')' 3, Bracket '(' 1], [], 49)],
               Node 48 [(Symb "NOT", [], [], 49)],
               Node 49 [(Var 0, [], [Bracket '>' 2, Bracket '<' 2], 50),
                        (Var 1, [], [Bracket '>' 1, Bracket '<' 1], 50)],
               Node 50 [(Symb ")", [Bracket ')' 2], [], 51),
                        (Symb "", [Bracket ')' 1, Bracket '(' 1], [], 51)],
               Node 51 [(Symb ")", [], [], 52)],
               Node 52 [(Symb "(", [], [], 53)],
               Node 53 [(Symb "(", [Bracket ')' 1, Bracket '(' 2], [], 54),
                        (Symb "", [Bracket '(' 1], [], 55)],
               Node 54 [(Symb "NOT", [], [], 55)],
               Node 55 [(Symb "", [], [], 44)],
               Node 56 [(Symb ")", [Bracket ')' 2], [Bracket '>' 5], 59),
                        (Symb ")", [Bracket ')' 2], [Bracket '>' 3], 57),
                        (Symb "", [], [Bracket '>' 2], 59),
                        (Symb "", [Bracket ')' 3], [Bracket '>' 3], 59),
                        (Symb "", [Bracket ')' 1], [Bracket '>' 5], 59)],
               Node 57 [(Symb "(", [], [], 58)],
               Node 58 [(Symb "T", [], [], 59)],
               Node 59 [(Symb ")", [], [], 35)],
               Node 60 [(Symb ")", [], [], 61)]]

partfuncLgraph::[Node]
partfuncLgraph = [Node 1 [(Symb ("Пусть даны числовые атомы a, b, n1, n2, n3. " ++ 
                                 "Реализовать кусочно-заданную функцию f(x) = " ++
                                 "n1 при x < a; n2 при a<=x<b; n3 при x > b " ++ 
                                 "с помощью defun и cond, и операций сравнения. " ++
                                 "Другие встроенные функции использовать нельзя. " ++
                                 "Число токенов в решении должно быть минимальным."), [], [], 2)],
                  Node 2 [(Symb "(", [], [], 3)],
                  Node 3 [(Symb "DEFUN", [], [], 4)],
                  Node 4 [(Func 0, [], [], 5)],
                  Node 5 [(Symb "(", [], [], 6)],
                  Node 6 [(Var 0, [], [], 7)],
                  Node 7 [(Symb ")", [], [], 8)],
                  Node 8 [(Symb "(", [], [], 9)],
                  Node 9 [(Symb "COND", [], [], 10)],
                  Node 10 [(Symb "(", [], [], 11)],
                  Node 11 [(Symb "(", [], [], 12)],
                  Node 12 [(Symb ">", [Bracket '(' 1], [], 13),
                           (Symb "<", [Bracket '(' 1, Bracket '(' 3], [], 13),
                           (Symb ">=", [Bracket '(' 2, Bracket '(' 3], [], 13),
                           (Symb "<=", [Bracket '(' 2], [], 13)],
                  Node 13 [(Symb "a", [Bracket ')' 1, Bracket '(' 1, Bracket '(' 3], [], 14),
                           (Var 0, [Bracket ')' 3], [], 14),
                           (Symb "b", [Bracket ')' 2, Bracket '(' 2, Bracket '(' 3], [], 14)],
                  Node 14 [(Symb "a", [Bracket ')' 1, Bracket '(' 1], [], 15),
                           (Var 0, [Bracket ')' 3], [], 15),
                           (Symb "b", [Bracket ')' 2, Bracket '(' 2], [], 15)],
                  Node 15 [(Symb ")", [], [], 16)],
                  Node 16 [(Symb "n1", [Bracket ')' 1, Bracket '(' 1], [], 17),
                           (Symb "n3", [Bracket ')' 2, Bracket '(' 2], [], 17)],
                  Node 17 [(Symb ")", [], [], 18)],
                  Node 18 [(Symb "(", [], [], 19)],
                  Node 19 [(Symb "(", [], [], 20)],
                  Node 20 [(Symb ">", [Bracket '(' 4], [], 21),
                           (Symb "<", [Bracket '(' 4, Bracket '(' 3], [], 21),
                           (Symb ">=", [Bracket '(' 5, Bracket '(' 3], [], 21),
                           (Symb "<=", [Bracket '(' 5], [], 21)],
                  Node 21 [(Symb "a", [Bracket ')' 4, Bracket ')' 2, Bracket '(' 2, Bracket '(' 1, Bracket '(' 3], [], 22),
                           (Symb "a", [Bracket ')' 5, Bracket ')' 2, Bracket '(' 1, Bracket '(' 2, Bracket '(' 3], [], 22),
                           (Var 0, [Bracket ')' 3], [], 22),
                           (Symb "b", [Bracket ')' 4, Bracket ')' 1, Bracket '(' 3, Bracket '(' 2, Bracket '(' 3], [], 22),
                           (Symb "b", [Bracket ')' 5, Bracket ')' 1, Bracket '(' 2, Bracket '(' 3, Bracket '(' 3], [], 22)],
                  Node 22 [(Symb "a", [Bracket ')' 4, Bracket ')' 2, Bracket '(' 2, Bracket '(' 1], [], 23),
                           (Symb "a", [Bracket ')' 5, Bracket ')' 2, Bracket '(' 1, Bracket '(' 2], [], 23),
                           (Var 0, [Bracket ')' 3], [], 23),
                           (Symb "b", [Bracket ')' 4, Bracket ')' 1, Bracket '(' 3, Bracket '(' 2], [], 23),
                           (Symb "b", [Bracket ')' 5, Bracket ')' 1, Bracket '(' 2, Bracket '(' 3], [], 23)],
                  Node 23 [(Symb ")", [], [], 24)],
                  Node 24 [(Symb "n1", [Bracket ')' 1], [], 25),
                           (Symb "n2", [Bracket ')' 2], [], 25),
                           (Symb "n3", [Bracket ')' 3], [], 25)],
                  Node 25 [(Symb ")", [], [], 26)],
                  Node 26 [(Symb "(", [], [], 27)],
                  Node 27 [(Symb "n1", [Bracket ')' 1], [], 28),
                           (Symb "n2", [Bracket ')' 2], [], 28),
                           (Symb "n3", [Bracket ')' 3], [], 28)],
                  Node 28 [(Symb ")", [], [], 29)],
                  Node 29 [(Symb ")", [], [], 30)],
                  Node 30 [(Symb ")", [], [], 31)]]

minmaxLgraph::[Node]
minmaxLgraph = [Node 1 [(Symb "Для трех различных чисел реализовать функцию, возвращающую ", [], [], 2)],
                Node 2 [(Symb "наибольшее ", [], [Bracket '<' 1], 3),
                        (Symb "наименьшее ", [], [Bracket '<' 2], 3)],
                Node 3 [(Symb ("из них. Разрешается использовать функции defun, cond и операции нестрогого сравнения. " ++
                              "Другие встроенные функции использовать нельзя." ++
                              "Число токенов в решении должно быть минимальным."), [], [], 4)],
                Node 4 [(Symb "(", [], [], 5)],
                Node 5 [(Symb "DEFUN", [], [], 6)],
                Node 6 [(Func 0, [], [], 7)],
                Node 7 [(Symb "(", [], [], 8)],
                Node 8 [(Var 0, [], [], 9)],
                Node 9 [(Var 1, [], [], 10)],
                Node 10 [(Var 2, [], [], 11)],
                Node 11 [(Symb ")", [], [], 12)],
                Node 12 [(Symb "(", [], [], 13)],
                Node 13 [(Symb "COND", [], [], 14)],
                Node 14 [(Symb "(", [], [], 15)],
                Node 15 [(Symb "(", [], [], 16)],
                Node 16 [(Symb "<", [], [], 17),
                         (Symb ">", [], [], 21)],
                Node 17 [(Var 0, [Bracket '(' 1], [], 18),
                         (Var 1, [Bracket '(' 2], [], 18),
                         (Var 2, [Bracket '(' 3], [], 18)],
                Node 18 [(Var 0, [Bracket ')' 2, Bracket '(' 1, Bracket '(' 2], [], 19),
                         (Var 0, [Bracket ')' 3, Bracket '(' 1, Bracket '(' 3], [], 19),
                         (Var 1, [Bracket ')' 1, Bracket '(' 2, Bracket '(' 1], [], 19),
                         (Var 1, [Bracket ')' 3, Bracket '(' 2, Bracket '(' 3], [], 19),
                         (Var 2, [Bracket ')' 1, Bracket '(' 3, Bracket '(' 1], [], 19),
                         (Var 2, [Bracket ')' 2, Bracket '(' 3, Bracket '(' 2], [], 19)],
                Node 19 [(Symb ")", [], [], 20)],
                Node 20 [(Symb "(", [], [Bracket '>' 1, Bracket '<' 1], 24),
                         (Symb "(", [Bracket ')' 1, Bracket ')' 2, Bracket '(' 1, Bracket '(' 2], [Bracket '>' 2, Bracket '<' 2], 24),
                         (Symb "(", [Bracket ')' 1, Bracket ')' 3, Bracket '(' 1, Bracket '(' 3], [Bracket '>' 2, Bracket '<' 2], 24),
                         (Symb "(", [Bracket ')' 2, Bracket ')' 1, Bracket '(' 2, Bracket '(' 1], [Bracket '>' 2, Bracket '<' 2], 24),
                         (Symb "(", [Bracket ')' 2, Bracket ')' 3, Bracket '(' 2, Bracket '(' 3], [Bracket '>' 2, Bracket '<' 2], 24),
                         (Symb "(", [Bracket ')' 3, Bracket ')' 1, Bracket '(' 3, Bracket '(' 1], [Bracket '>' 2, Bracket '<' 2], 24),
                         (Symb "(", [Bracket ')' 3, Bracket ')' 2, Bracket '(' 3, Bracket '(' 2], [Bracket '>' 2, Bracket '<' 2], 24)],
                Node 21 [(Var 0, [Bracket '(' 1], [], 22),
                         (Var 1, [Bracket '(' 2], [], 22),
                         (Var 2, [Bracket '(' 3], [], 22)],
                Node 22 [(Var 0, [Bracket ')' 2, Bracket '(' 2, Bracket '(' 1], [], 23),
                         (Var 0, [Bracket ')' 3, Bracket '(' 3, Bracket '(' 1], [], 23),
                         (Var 1, [Bracket ')' 1, Bracket '(' 1, Bracket '(' 2], [], 23),
                         (Var 1, [Bracket ')' 3, Bracket '(' 3, Bracket '(' 2], [], 23),
                         (Var 2, [Bracket ')' 1, Bracket '(' 1, Bracket '(' 3], [], 23),
                         (Var 2, [Bracket ')' 2, Bracket '(' 2, Bracket '(' 3], [], 23)],
                Node 23 [(Symb ")", [], [], 20)],
                Node 24 [(Symb "COND", [], [], 25)],
                Node 25 [(Symb "(", [], [], 26)],
                Node 26 [(Symb "(", [], [], 27)],
                Node 27 [(Symb "<", [], [], 28),
                         (Symb ">", [], [], 32)],
                Node 28 [(Var 0, [Bracket '(' 1], [], 29),
                         (Var 1, [Bracket '(' 2], [], 29),
                         (Var 2, [Bracket '(' 3], [], 29)],
                Node 29 [(Var 0, [Bracket ')' 2, Bracket ')' 3, Bracket '(' 2, Bracket '(' 1], [], 30),
                         (Var 0, [Bracket ')' 3, Bracket ')' 2, Bracket '(' 3, Bracket '(' 1], [], 30),
                         (Var 1, [Bracket ')' 1, Bracket ')' 3, Bracket '(' 1, Bracket '(' 2], [], 30),
                         (Var 1, [Bracket ')' 3, Bracket ')' 1, Bracket '(' 3, Bracket '(' 2], [], 30),
                         (Var 2, [Bracket ')' 1, Bracket ')' 2, Bracket '(' 1, Bracket '(' 3], [], 30),
                         (Var 2, [Bracket ')' 2, Bracket ')' 1, Bracket '(' 2, Bracket '(' 3], [], 30)],
                Node 30 [(Symb ")", [], [], 31)],
                Node 31 [(Symb "", [], [Bracket '>' 1, Bracket '<' 1], 35),
                         (Symb "", [Bracket ')' 1, Bracket ')' 2, Bracket '(' 1, Bracket '(' 2], [Bracket '>' 2, Bracket '<' 2], 35),
                         (Symb "", [Bracket ')' 1, Bracket ')' 3, Bracket '(' 1, Bracket '(' 3], [Bracket '>' 2, Bracket '<' 2], 35),
                         (Symb "", [Bracket ')' 2, Bracket ')' 1, Bracket '(' 2, Bracket '(' 1], [Bracket '>' 2, Bracket '<' 2], 35),
                         (Symb "", [Bracket ')' 2, Bracket ')' 3, Bracket '(' 2, Bracket '(' 3], [Bracket '>' 2, Bracket '<' 2], 35),
                         (Symb "", [Bracket ')' 3, Bracket ')' 1, Bracket '(' 3, Bracket '(' 1], [Bracket '>' 2, Bracket '<' 2], 35),
                         (Symb "", [Bracket ')' 3, Bracket ')' 2, Bracket '(' 3, Bracket '(' 2], [Bracket '>' 2, Bracket '<' 2], 35)],
                Node 32 [(Var 0, [Bracket '(' 1], [], 33),
                         (Var 1, [Bracket '(' 2], [], 33),
                         (Var 2, [Bracket '(' 3], [], 33)],
                Node 33 [(Var 0, [Bracket ')' 2, Bracket ')' 3, Bracket '(' 1, Bracket '(' 2], [], 34),
                         (Var 0, [Bracket ')' 3, Bracket ')' 2, Bracket '(' 1, Bracket '(' 3], [], 34),
                         (Var 1, [Bracket ')' 1, Bracket ')' 3, Bracket '(' 2, Bracket '(' 1], [], 34),
                         (Var 1, [Bracket ')' 3, Bracket ')' 1, Bracket '(' 2, Bracket '(' 3], [], 34),
                         (Var 2, [Bracket ')' 1, Bracket ')' 2, Bracket '(' 3, Bracket '(' 1], [], 34),
                         (Var 2, [Bracket ')' 2, Bracket ')' 1, Bracket '(' 3, Bracket '(' 2], [], 34)],
                Node 34 [(Symb ")", [], [], 31)],
                Node 35 [(Var 0, [Bracket ')' 1], [], 36),
                         (Var 1, [Bracket ')' 2], [], 36),
                         (Var 2, [Bracket ')' 3], [], 36)],
                Node 36 [(Symb ")", [], [], 37)],
                Node 37 [(Symb "(", [], [], 38)],
                Node 38 [(Var 0, [Bracket ')' 1], [], 39),
                         (Var 1, [Bracket ')' 2], [], 39),
                         (Var 2, [Bracket ')' 3], [], 39)],
                Node 39 [(Symb ")", [], [], 40)],
                Node 40 [(Symb ")", [], [], 41)],
                Node 41 [(Symb ")", [], [], 42)],
                Node 42 [(Symb "(", [], [], 43)],
                Node 43 [(Symb "(", [], [], 44)],
                Node 44 [(Symb "<", [], [], 45),
                         (Symb ">", [], [], 49)],
                Node 45 [(Var 0, [Bracket '(' 1], [], 46),
                         (Var 1, [Bracket '(' 2], [], 46),
                         (Var 2, [Bracket '(' 3], [], 46)],
                Node 46 [(Var 0, [Bracket ')' 2, Bracket ')' 3, Bracket '(' 2, Bracket '(' 1], [], 47),
                         (Var 0, [Bracket ')' 3, Bracket ')' 2, Bracket '(' 3, Bracket '(' 1], [], 47),
                         (Var 1, [Bracket ')' 1, Bracket ')' 3, Bracket '(' 1, Bracket '(' 2], [], 47),
                         (Var 1, [Bracket ')' 3, Bracket ')' 1, Bracket '(' 3, Bracket '(' 2], [], 47),
                         (Var 2, [Bracket ')' 1, Bracket ')' 2, Bracket '(' 1, Bracket '(' 3], [], 47),
                         (Var 2, [Bracket ')' 2, Bracket ')' 1, Bracket '(' 2, Bracket '(' 3], [], 47)],
                Node 47 [(Symb ")", [], [], 48)],
                Node 48 [(Symb "", [], [Bracket '>' 1], 52),
                         (Symb "", [Bracket ')' 1, Bracket ')' 2, Bracket '(' 1, Bracket '(' 2], [Bracket '>' 2], 52),
                         (Symb "", [Bracket ')' 1, Bracket ')' 3, Bracket '(' 1, Bracket '(' 3], [Bracket '>' 2], 52),
                         (Symb "", [Bracket ')' 2, Bracket ')' 1, Bracket '(' 2, Bracket '(' 1], [Bracket '>' 2], 52),
                         (Symb "", [Bracket ')' 2, Bracket ')' 3, Bracket '(' 2, Bracket '(' 3], [Bracket '>' 2], 52),
                         (Symb "", [Bracket ')' 3, Bracket ')' 1, Bracket '(' 3, Bracket '(' 1], [Bracket '>' 2], 52),
                         (Symb "", [Bracket ')' 3, Bracket ')' 2, Bracket '(' 3, Bracket '(' 2], [Bracket '>' 2], 52)],
                Node 49 [(Var 0, [Bracket '(' 1], [], 50),
                         (Var 1, [Bracket '(' 2], [], 50),
                         (Var 2, [Bracket '(' 3], [], 50)],
                Node 50 [(Var 0, [Bracket ')' 2, Bracket ')' 3, Bracket '(' 1, Bracket '(' 2], [], 51),
                         (Var 0, [Bracket ')' 3, Bracket ')' 2, Bracket '(' 1, Bracket '(' 3], [], 51),
                         (Var 1, [Bracket ')' 1, Bracket ')' 3, Bracket '(' 2, Bracket '(' 1], [], 51),
                         (Var 1, [Bracket ')' 3, Bracket ')' 1, Bracket '(' 2, Bracket '(' 3], [], 51),
                         (Var 2, [Bracket ')' 1, Bracket ')' 2, Bracket '(' 3, Bracket '(' 1], [], 51),
                         (Var 2, [Bracket ')' 2, Bracket ')' 1, Bracket '(' 3, Bracket '(' 2], [], 51)],
                Node 51 [(Symb ")", [], [], 48)],
                Node 52 [(Var 0, [Bracket ')' 1], [], 53),
                         (Var 1, [Bracket ')' 2], [], 53),
                         (Var 2, [Bracket ')' 3], [], 53)],
                Node 53 [(Symb ")", [], [], 54)],
                Node 54 [(Symb "(", [], [], 55)],
                Node 55 [(Var 0, [Bracket ')' 1], [], 56),
                         (Var 1, [Bracket ')' 2], [], 56),
                         (Var 2, [Bracket ')' 3], [], 56)],
                Node 56 [(Symb ")", [], [], 57)],
                Node 57 [(Symb ")", [], [], 58)],
                Node 58 [(Symb ")", [], [], 59)]]

absoluteLgraph::[Node]
absoluteLgraph = [Node 1 [(Symb ("С помощью условной конструкции реализовать функцию, возвращающую модуль числа. " ++
                                 "Число токенов в решении должно быть минимальным."), [], [], 2)],
                  Node 2 [(Symb "(", [], [], 3)],
                  Node 3 [(Symb "DEFUN", [], [], 4)],
                  Node 4 [(Func 0, [], [], 5)],
                  Node 5 [(Symb "(", [], [], 6)],
                  Node 6 [(Var 0, [], [], 7)],
                  Node 7 [(Symb ")", [], [], 8)],
                  Node 8 [(Symb "(", [], [], 9)],
                  Node 9 [(Symb "COND", [], [], 10)],
                  Node 10 [(Symb "(", [], [], 11)],
                  Node 11 [(Symb "(", [], [], 12)],
                  Node 12 [(Symb ">", [Bracket '(' 1], [], 13),
                           (Symb "<", [Bracket '(' 2], [], 13),
                           (Symb ">=", [Bracket '(' 1], [], 13),
                           (Symb "<=", [Bracket '(' 2], [], 13)],
                  Node 13 [(Symb "0", [Bracket '(' 1], [], 14),
                           (Var 0, [Bracket '(' 2], [], 14)],
                  Node 14 [(Symb "0", [Bracket ')' 2, Bracket ')' 1, Bracket '(' 1], [], 15),
                           (Symb "0", [Bracket ')' 2, Bracket ')' 2, Bracket '(' 2], [], 15),
                           (Var 0, [Bracket ')' 1, Bracket ')' 1, Bracket '(' 2], [], 15),
                           (Var 0, [Bracket ')' 1, Bracket ')' 2, Bracket '(' 1], [], 15)],
                  Node 15 [(Symb ")", [], [], 16)],
                  Node 16 [(Symb "(", [Bracket ')' 2, Bracket '(' 2], [], 17),
                           (Symb "", [Bracket ')' 1, Bracket '(' 1], [], 18)],
                  Node 17 [(Symb "-", [], [], 18)],
                  Node 18 [(Var 0, [], [], 19)],
                  Node 19 [(Symb ")", [Bracket ')' 2, Bracket '(' 1], [], 20),
                           (Symb "", [Bracket ')' 1, Bracket '(' 2], [], 20)],
                  Node 20 [(Symb ")", [], [], 21)],
                  Node 21 [(Symb "(", [], [], 22)],
                  Node 22 [(Symb "(", [Bracket ')' 2, Bracket '(' 2], [], 23),
                           (Symb "", [Bracket ')' 1, Bracket '(' 1], [], 24)],
                  Node 23 [(Symb "-", [], [], 24)],
                  Node 24 [(Var 0, [], [], 25)],
                  Node 25 [(Symb ")", [Bracket ')' 2], [], 26),
                           (Symb "", [Bracket ')' 1], [], 26)],
                  Node 26 [(Symb ")", [], [], 27)],
                  Node 27 [(Symb ")", [], [], 28)],
                  Node 28 [(Symb ")", [], [], 29)]]

listpropsLgraph::[Node]
listpropsLgraph = [Node 1 [(Symb ("Реализовать не рекурсивную функцию с атомом и списком в качестве параметров, которая возвращает исходный список, " ++
                                 "если атом содержится в списке, и добавляет его в начало списка иначе. "), [], [Bracket '<' 1], 2),
                           (Symb "Реализовать функцию для одноуровневого списка. ", [], [], 3)],
                   Node 2 [(Symb "Решение должно быть минимальным по числу токенов.", [], [], 5)],
                   Node 3 [(Symb "Если его первый элемент равен a, заменить элемент на x, а если равен b, то на y. ", [], [Bracket '<' 2, Bracket '<' 4], 4),
                           (Symb "Если первые два его элемента равны, вернуть список без них. ", [], [Bracket '<' 3, Bracket '<' 4], 4)],
                   Node 4 [(Symb "Иначе возвращается список без изменений. ", [], [], 2)],
                   Node 5 [(Symb "(", [], [], 6)],
                   Node 6 [(Symb "DEFUN", [], [], 7)],
                   Node 7 [(Func 0, [], [], 8)],
                   Node 8 [(Symb "(", [], [], 9)],
                   Node 9 [(Var 0, [Bracket '(' 1], [Bracket '>' 1, Bracket '<' 1], 10),
                           (Var 1, [Bracket '(' 2], [Bracket '>' 1, Bracket '<' 1], 10),
                           (Symb "", [Bracket '(' 1], [Bracket '>' 4], 10)],
                   Node 10 [(Var 0, [Bracket ')' 2], [], 11),
                            (Var 1, [Bracket ')' 1], [], 11)],
                   Node 11 [(Symb ")", [], [], 12)],
                   Node 12 [(Symb "(", [], [], 13)],
                   Node 13 [(Symb "COND", [], [], 14)],
                   Node 14 [(Symb "(", [], [], 15)],
                   Node 15 [(Symb "(", [], [], 16)],
                   Node 16 [(Symb "MEMBER", [], [Bracket '>' 1, Bracket '<' 1], 17),
                            (Symb "NULL", [], [Bracket '>' 2, Bracket '<' 2], 17),
                            (Symb "NULL", [], [Bracket '>' 3, Bracket '<' 3], 17),
                            (Symb "OR", [], [Bracket '>' 3, Bracket '<' 4], 17)],
                   Node 17 [(Var 0, [Bracket '(' 1], [Bracket '>' 1, Bracket '<' 1], 24),
                            (Symb "", [Bracket '(' 1], [Bracket '>' 2, Bracket '<' 2, Bracket '<' 5], 24),
                            (Symb "", [Bracket '(' 1], [Bracket '>' 3, Bracket '<' 3, Bracket '<' 5], 24),
                            (Symb "(", [Bracket '(' 2], [Bracket '>' 4, Bracket '<' 4], 18)],
                   Node 18 [(Symb "NULL", [], [], 19)],
                   Node 19 [(Var 1, [Bracket '(' 3], [], 23),
                            (Symb "(", [], [], 20)],
                   Node 20 [(Symb "CDR", [], [], 21)],
                   Node 21 [(Var 1, [], [], 22)],
                   Node 22 [(Symb ")", [], [], 23)],
                   Node 23 [(Symb ")", [], [], 24)],
                   Node 24 [(Var 1, [Bracket ')' 1], [], 25),
                            (Symb "", [], [Bracket '>' 4, Bracket '<' 4], 28)],
                   Node 25 [(Symb ")", [], [], 26)],
                   Node 26 [(Var 1, [], [Bracket '>' 1, Bracket '<' 1], 27),
                            (Var 1, [], [Bracket '>' 5], 27),
                            (Symb "NIL", [], [Bracket '>' 5], 27)],
                   Node 27 [(Symb ")", [], [], 28)],
                   Node 28 [(Symb "(", [Bracket '(' 3], [Bracket '>' 3, Bracket '<' 3], 29),
                            (Symb "", [], [Bracket '>' 4, Bracket '<' 4], 29),
                            (Symb "", [], [Bracket '>' 2, Bracket '<' 2], 39),
                            (Symb "", [], [Bracket '>' 1, Bracket '<' 1], 51)],
                   Node 29 [(Symb "(", [], [], 30)],
                   Node 30 [(Symb "NULL", [], [], 31)],
                   Node 31 [(Var 1, [], [Bracket '>' 4, Bracket '<' 4], 35),
                            (Symb "(", [Bracket ')' 3], [], 32)],
                   Node 32 [(Symb "CDR", [], [], 33)],
                   Node 33 [(Var 1, [], [], 34)],
                   Node 34 [(Symb ")", [], [], 35)],
                   Node 35 [(Symb ")", [], [], 36)],
                   Node 36 [(Symb "", [], [Bracket '>' 3, Bracket '<' 3], 37),
                            (Symb ")", [Bracket ')' 2], [Bracket '>' 4, Bracket '<' 3], 37)],
                   Node 37 [(Var 1, [], [], 38)],
                   Node 38 [(Symb ")", [], [], 39)],
                   Node 39 [(Symb "(", [], [], 40)],
                   Node 40 [(Symb "(", [], [], 41)],
                   Node 41 [(Symb "EQ", [], [], 42)],
                   Node 42 [(Symb "B", [Bracket '(' 2, Bracket '(' 1], [Bracket '>' 2, Bracket '<' 2], 46),
                            (Symb "A", [Bracket '(' 3, Bracket '(' 1], [Bracket '>' 2, Bracket '<' 2], 46),
                            (Symb "(", [], [], 43)],
                   Node 43 [(Symb "CAR", [], [], 44),
                            (Symb "CADR", [Bracket '(' 1], [Bracket '>' 3, Bracket '<' 3], 44)],
                   Node 44 [(Var 1, [], [], 45)],
                   Node 45 [(Symb ")", [], [], 46)],
                   Node 46 [(Symb "(", [], [], 47),
                            (Symb "A", [Bracket '(' 3], [Bracket '>' 2, Bracket '<' 2], 50),
                            (Symb "B", [Bracket '(' 2], [Bracket '>' 2, Bracket '<' 2], 50)],
                   Node 47 [(Symb "CADR", [], [Bracket '>' 3, Bracket '<' 3], 48),
                            (Symb "CAR", [Bracket ')' 1], [], 48)],
                   Node 48 [(Var 1, [], [], 49)],
                   Node 49 [(Symb ")", [], [], 50)],
                   Node 50 [(Symb ")", [], [], 51)],
                   Node 51 [(Symb "(", [], [], 52)],
                   Node 52 [(Symb "CONS", [], [], 53),
                            (Symb "CDDR", [], [Bracket '>' 3, Bracket '<' 3], 58)],
                   Node 53 [(Var 0, [], [Bracket '>' 1, Bracket '<' 1], 54),
                            (Symb "X", [Bracket ')' 3, Bracket '(' 2], [Bracket '>' 2, Bracket '<' 2], 54),
                            (Symb "Y", [Bracket ')' 2, Bracket '(' 3], [Bracket '>' 2, Bracket '<' 2], 54)],
                   Node 54 [(Symb "(", [], [Bracket '>' 2, Bracket '<' 2], 55),
                            (Var 1, [], [Bracket '>' 1, Bracket '<' 1], 59)],
                   Node 55 [(Symb "CDR", [], [], 56)],
                   Node 56 [(Var 1, [], [], 57)],
                   Node 57 [(Symb ")", [], [], 59)],
                   Node 58 [(Var 1, [], [], 59)],
                   Node 59 [(Symb ")", [], [], 60)],
                   Node 60 [(Symb ")", [], [], 61),
                            (Symb "", [], [Bracket '>' 1], 85)],
                   Node 61 [(Symb "(", [], [Bracket '>' 2], 62),
                            (Symb "", [], [Bracket '>' 3], 82)],
                   Node 62 [(Symb "(", [], [], 63)],
                   Node 63 [(Symb "EQ", [], [], 64)],
                   Node 64 [(Symb "B", [Bracket ')' 2, Bracket '(' 2, Bracket '(' 1], [], 68),
                            (Symb "A", [Bracket ')' 3, Bracket '(' 3, Bracket '(' 1], [], 68),
                            (Symb "(", [], [], 65)],
                   Node 65 [(Symb "CAR", [], [], 66)],
                   Node 66 [(Var 1, [], [], 67)],
                   Node 67 [(Symb ")", [], [], 68)],
                   Node 68 [(Symb "(", [Bracket ')' 1], [], 69),
                            (Symb "A", [Bracket ')' 3, Bracket '(' 3], [], 72),
                            (Symb "B", [Bracket ')' 2, Bracket '(' 2], [], 72)],
                   Node 69 [(Symb "CAR", [], [], 70)],
                   Node 70 [(Var 1, [], [], 71)],
                   Node 71 [(Symb ")", [], [], 72)],
                   Node 72 [(Symb ")", [], [], 73)],
                   Node 73 [(Symb "(", [], [], 74)],
                   Node 74 [(Symb "CONS", [], [], 75)],
                   Node 75 [(Symb "X", [Bracket ')' 3], [], 76),
                            (Symb "Y", [Bracket ')' 2], [], 76)],
                   Node 76 [(Symb "(", [], [], 77)],
                   Node 77 [(Symb "CDR", [], [], 78)],
                   Node 78 [(Var 1, [], [], 79)],
                   Node 79 [(Symb ")", [], [], 80)],
                   Node 80 [(Symb ")", [], [], 81)],
                   Node 81 [(Symb ")", [], [], 82)],
                   Node 82 [(Symb "(", [], [], 83)],
                   Node 83 [(Var 1, [], [], 84)],
                   Node 84 [(Symb ")", [], [], 85)],
                   Node 85 [(Symb ")", [], [], 86)],
                   Node 86 [(Symb ")", [], [], 87)]]


arithmlistLgraph::[Node]
arithmlistLgraph = [Node 1 [(Symb "Реализовать рекурсивную функцию ", [], [], 2)],
                    Node 2 [(Symb "без накапливающего параметра, ", [], [], 3)],
                    Node 3 [(Symb "которая вычисляет ", [], [], 4)],
                    Node 4 [(Symb "сумму ", [], [Bracket '<' 3], 5),
                            (Symb "произведение ", [], [Bracket '<' 4], 5),
                            (Symb "длину ", [], [Bracket '<' 5], 5)],
                    Node 5 [(Symb "списка чисел. Число токенов, отличных от скобок, в решении должно быть минимальным.", [], [], 6)],
                    Node 6 [(Symb "(", [], [], 7)],
                    Node 7 [(Symb "DEFUN", [], [], 8)],
                    Node 8 [(Func 0, [], [], 9)],
                    Node 9 [(Symb "(", [], [], 10)],
                    Node 10 [(Var 0, [], [], 11)],
                    Node 11 [(Symb ")", [], [], 12)],
                    Node 12 [(Symb "(", [], [], 13)],
                    Node 13 [(Symb "COND", [], [], 14)],
                    Node 14 [(Symb "(", [], [], 15)],
                    Node 15 [(Symb "(", [], [], 16)],
                    Node 16 [(Symb "NULL", [], [], 17)],
                    Node 17 [(Var 0, [], [], 18)],
                    Node 18 [(Symb ")", [], [], 19)],
                    Node 19 [(Symb "0", [], [Bracket '>' 3, Bracket '<' 3], 20),
                             (Symb "0", [], [Bracket '>' 5, Bracket '<' 5], 20),
                             (Symb "1", [], [Bracket '>' 4, Bracket '<' 4], 20)],
                    Node 20 [(Symb ")", [], [], 21)],
                    Node 21 [(Symb "(", [], [], 22)],
                    Node 22 [(Symb "T", [], [], 23)],
                    Node 23 [(Symb "(", [], [], 24)],
                    Node 24 [(Symb "+", [], [Bracket '>' 3, Bracket '<' 3], 25),
                             (Symb "+", [], [Bracket '>' 5,Bracket '<' 5], 25),
                             (Symb "*", [], [Bracket '>' 4, Bracket '<' 3], 25)],
                    Node 25 [(Symb "(", [], [], 26),
                             (Symb "1", [Bracket '(' 2], [Bracket '>' 5], 29)],
                    Node 26 [(Symb "CAR", [Bracket '(' 2], [Bracket '>' 3], 27),
                             (Func 0, [Bracket '(' 1], [], 31)],
                    Node 27 [(Var 0, [], [], 28)],
                    Node 28 [(Symb ")", [], [], 29)],
                    Node 29 [(Symb "(", [], [], 30)],
                    Node 30 [(Func 0, [], [], 31)],
                    Node 31 [(Symb "(", [], [], 32)],
                    Node 32 [(Symb "CDR", [], [], 33)],
                    Node 33 [(Var 0, [], [], 34)],
                    Node 34 [(Symb ")", [], [], 35)],
                    Node 35 [(Symb ")", [Bracket ')' 1], [], 36),
                             (Symb "", [Bracket ')' 2], [], 39)],
                    Node 36 [(Symb "(", [], [], 37),
                             (Symb "1", [], [Bracket '>' 5], 40)],
                    Node 37 [(Symb "CAR", [], [Bracket '>' 3], 38)],
                    Node 38 [(Var 0, [], [], 39)],
                    Node 39 [(Symb ")", [], [], 40)],
                    Node 40 [(Symb ")", [], [], 41)],
                    Node 41 [(Symb ")", [], [], 42)],
                    Node 42 [(Symb ")", [], [], 43)],
                    Node 43 [(Symb ")", [], [], 44)]]


ziplistsLgraph::[Node]
ziplistsLgraph = [Node 1 [(Symb "Реализовать функционал, который принимает на вход ", [], [], 2)],
                  Node 2 [(Symb "функцию F и два списка (X1 ... Xn), (Y1 ... Yn), ", [Bracket '(' 1], [], 3),
                          (Symb "список функциональных аргументов (F1 ... Fn) и список (X1 ... Xn) ", [Bracket '(' 2], [], 3)],
                  Node 3 [(Symb "и возвращает список вида ", [], [], 4)],
                  Node 4 [(Symb "(F(X1,Y1) ... F(Xn,Yn))", [Bracket ')' 1], [Bracket '<' 1], 5),
                          (Symb "(F1(X1) ... Fn(Xn))", [Bracket ')' 2], [Bracket '<' 2], 5)],
                  Node 5 [(Symb ". Число токенов, отличных от скобок, в решении должно быть минимальным.", [], [], 6)],
                  Node 6 [(Symb "(", [], [], 7)],
                  Node 7 [(Symb "DEFUN", [], [], 8)],
                  Node 8 [(Func 0, [], [], 9)],
                  Node 9 [(Symb "(", [], [], 10)],
                  Node 10 [(Var 0, [], [], 11)],
                  Node 11 [(Var 1, [], [], 12)],
                  Node 12 [(Var 2, [], [Bracket '>' 1, Bracket '<' 1], 13),
                           (Symb "", [], [Bracket '>' 2, Bracket '<' 2], 13)],
                  Node 13 [(Symb ")", [], [], 14)],
                  Node 14 [(Symb "(", [], [], 15)],
                  Node 15 [(Symb "COND", [], [], 16)],
                  Node 16 [(Symb "(", [], [], 17)],
                  Node 17 [(Symb "(", [], [], 18)],
                  Node 18 [(Symb "NULL", [], [], 19)],
                  Node 19 [(Var 0, [Bracket '(' 0], [Bracket '>' 2, Bracket '<' 2], 20),
                           (Var 1, [Bracket '(' 1], [], 20),
                           (Var 2, [Bracket '(' 2], [Bracket '>' 1, Bracket '<' 1], 20)],
                  Node 20 [(Symb ")", [], [], 21)],
                  Node 21 [(Symb "NIL", [Bracket ')' 0], [], 22),
                           (Symb "NIL", [Bracket ')' 1], [], 22),
                           (Symb "NIL", [Bracket ')' 2], [], 22),
                           (Var 0, [Bracket ')' 0], [], 22),
                           (Var 1, [Bracket ')' 1], [], 22),
                           (Var 2, [Bracket ')' 2], [], 22)],
                  Node 22 [(Symb ")", [], [], 23)],
                  Node 23 [(Symb "(", [], [], 24)],
                  Node 24 [(Symb "T", [], [], 25)],
                  Node 25 [(Symb "(", [], [], 26)],
                  Node 26 [(Symb "COND", [], [], 27)],
                  Node 27 [(Symb "(", [], [], 28)],
                  Node 28 [(Symb "FUNCALL", [Bracket '(' 1], [], 29)],
                  Node 29 [(Var 0, [], [Bracket '>' 1, Bracket '<' 1], 30),
                           (Symb "", [], [Bracket '>' 2, Bracket '<' 2], 30)],
                  Node 30 [(Symb "(", [], [], 31)],
                  Node 31 [(Symb "CAR", [Bracket ')' 1, Bracket '(' 1], [], 32),
                           (Symb "CDR", [Bracket ')' 2, Bracket '(' 2], [], 32)],
                  Node 32 [(Var 0, [], [Bracket '>' 2, Bracket '<' 2], 33),
                           (Var 1, [], [Bracket '>' 1, Bracket '<' 1], 33)],
                  Node 33 [(Symb ")", [], [], 34)],
                  Node 34 [(Symb "(", [], [], 35)],
                  Node 35 [(Symb "CAR", [Bracket ')' 1, Bracket '(' 1], [], 36),
                           (Symb "CDR", [Bracket ')' 2, Bracket '(' 2], [], 36)],
                  Node 36 [(Var 1, [], [Bracket '>' 2, Bracket '<' 2], 37),
                           (Var 2, [], [Bracket '>' 1, Bracket '<' 1], 37)],
                  Node 37 [(Symb ")", [], [], 38)],
                  Node 38 [(Symb ")", [], [], 39)],
                  Node 39 [(Symb "(", [Bracket ')' 1], [], 40),
                           (Symb "", [Bracket ')' 2], [], 41)],
                  Node 40 [(Func 0, [Bracket '(' 2], [], 29)],
                  Node 41 [(Symb ")", [], [Bracket '>' 1], 42),
                           (Symb ")", [], [Bracket '>' 2], 42)],
                  Node 42 [(Symb ")", [], [], 43)],
                  Node 43 [(Symb ")", [], [], 44)],
                  Node 44 [(Symb ")", [], [], 45)]]